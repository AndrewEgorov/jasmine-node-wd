// Generated by CoffeeScript 1.7.1
(function() {
  var TerminalReporter, noOp, util, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  util = null;

  try {
    util = require('util');
  } catch (_error) {
    util = require('sys');
  }

  noOp = function() {};

  TerminalReporter = (function() {
    TerminalReporter.prototype.ANSIColors = {
      pass: function() {
        return '\x1B[32m';
      },
      fail: function() {
        return '\x1B[31m';
      },
      specTiming: function() {
        return '\x1B[34m';
      },
      suiteTiming: function() {
        return '\x1B[33m';
      },
      ignore: function() {
        return '\x1B[37m';
      },
      neutral: function() {
        return '\x1B[0m';
      }
    };

    TerminalReporter.prototype.NoColors = {
      pass: function() {
        return '';
      },
      fail: function() {
        return '';
      },
      specTiming: function() {
        return '';
      },
      suiteTiming: function() {
        return '';
      },
      ignore: function() {
        return '';
      },
      neutral: function() {
        return '';
      }
    };

    function TerminalReporter(config) {
      var defaults;
      this.config = config != null ? config : {};
      this.specStarted = __bind(this.specStarted, this);
      this.suiteDone = __bind(this.suiteDone, this);
      this.suiteStarted = __bind(this.suiteStarted, this);
      this.jasmineDone = __bind(this.jasmineDone, this);
      this.jasmineStarted = __bind(this.jasmineStarted, this);
      defaults = {
        callback: noOp,
        includeStackTrace: false,
        print: function(str) {
          process.stdout.write(util.format(str));
        },
        stackFilter: function(t) {
          return t;
        }
      };
      this.config = _.defaults(this.config, defaults);
      this.config.color = this.config.color ? this.ANSIColors : this.NoColors;
      this.specResults = '';
      this.counts = {
        tests: 0,
        assertions: 0,
        failures: 0,
        skipped: 0
      };
      this.suites = {};
      this.allSpecs = {};
      return;
    }

    TerminalReporter.prototype.jasmineStarted = function(runner) {
      this.startedAt = +(new Date);
    };

    TerminalReporter.prototype.jasmineDone = function() {
      var color, elapsed, now, results;
      now = +(new Date);
      elapsed = now - this.startedAt;
      this.printFailures();
      this.config.print("\n\nFinished in " + (elapsed / 1000) + " seconds\n");
      results = ["" + this.counts.tests + " Tests", "" + null + " Assertions", "" + this.counts.failures + " Failures", "" + this.counts.skipped + " Skipped\n\n"];
      if (this.counts.failures > 0) {
        color = this.config.color.fail();
      } else {
        color = this.config.color.pass();
      }
      this.config.print(this.stringWithColor(results.join(', '), color));
    };

    TerminalReporter.prototype.suiteStarted = function(suite) {
      this.suites[suite.id] = suite;
      this.currentSuite = suite;
    };

    TerminalReporter.prototype.suiteDone = function(suite) {};

    TerminalReporter.prototype.specStarted = function(spec) {
      this.counts.tests++;
    };

    TerminalReporter.prototype.printFailures = function() {
      var count, failure, indent, spec, specs, suite, _i, _j, _len, _len1, _ref, _ref1;
      if (!(this.counts.failures > 0)) {
        return;
      }
      this.config.print("\n\nFailures:");
      indent = "  ";
      count = 1;
      _ref = this.allSpecs;
      for (suite in _ref) {
        specs = _ref[suite];
        for (_i = 0, _len = specs.length; _i < _len; _i++) {
          spec = specs[_i];
          _ref1 = spec.failedExpectations;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            failure = _ref1[_j];
            this.config.print("\n\n" + indent + count + ") " + spec.fullName + "\n" + indent + indent + "Message:\n" + indent + indent + indent + (this.stringWithColor(failure.message, this.config.color.fail())));
            if (this.config.includeStackTrace) {
              this.config.print("\n\n" + indent + indent + "Stacktrace:\n" + indent + indent + indent + failure.stack);
            }
          }
        }
      }
    };

    TerminalReporter.prototype.stringWithColor = function(string, color) {
      if (color == null) {
        color = this.config.color.neutral();
      }
      return "" + color + string + (this.config.color.neutral());
    };

    TerminalReporter.prototype.specDone = function(spec) {
      var msg, _base, _name;
      ((_base = this.allSpecs)[_name = this.currentSuite.id] != null ? _base[_name] : _base[_name] = []).push(spec);
      msg = '';
      switch (spec.status) {
        case 'skipped':
          this.counts.skipped++;
          msg = this.stringWithColor('-', this.config.color.ignore());
          break;
        case 'passed':
          msg = this.stringWithColor('.', this.config.color.pass());
          break;
        case 'failed':
          this.counts.failures++;
          msg = this.stringWithColor('F', this.config.color.fail());
          break;
        default:
          msg = this.stringWithColor('U', this.config.color.fail());
      }
      this.specResults += msg;
      this.config.print(msg);
    };

    return TerminalReporter;

  })();

  exports.terminalReporters = {
    TerminalReporter: TerminalReporter,
    TerminalVerboseReporter: TerminalReporter
  };

}).call(this);
