// Generated by CoffeeScript 1.7.1
(function() {
  var TerminalReporter, noOp, util, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  util = null;

  try {
    util = require('util');
  } catch (_error) {
    util = require('sys');
  }

  noOp = function() {};

  TerminalReporter = (function() {
    TerminalReporter.prototype.ANSIColors = {
      pass: function() {
        return '\x33[32m';
      },
      fail: function() {
        return '\x33[31m';
      },
      specTiming: function() {
        return '\x33[34m';
      },
      suiteTiming: function() {
        return '\x33[33m';
      },
      ignore: function() {
        return '\x33[37m';
      },
      neutral: function() {
        return '\x33[0m';
      }
    };

    TerminalReporter.prototype.NoColors = {
      pass: function() {
        return '';
      },
      fail: function() {
        return '';
      },
      specTiming: function() {
        return '';
      },
      suiteTiming: function() {
        return '';
      },
      ignore: function() {
        return '';
      },
      neutral: function() {
        return '';
      }
    };

    function TerminalReporter(config) {
      var defaults;
      this.config = config != null ? config : {};
      this.specDone = __bind(this.specDone, this);
      this.specStarted = __bind(this.specStarted, this);
      this.suiteDone = __bind(this.suiteDone, this);
      this.suiteStarted = __bind(this.suiteStarted, this);
      this.jasmineDone = __bind(this.jasmineDone, this);
      this.jasmineStarted = __bind(this.jasmineStarted, this);
      defaults = {
        callback: noOp,
        includeStackTrace: false,
        print: function(str) {
          process.stdout.write(util.format(str));
        },
        stackFilter: function(t) {
          return t;
        }
      };
      this.config = _.defaults(this.config, defaults);
      this.config.color = this.config.color ? this.ANSIColors : this.NoColors;
      return;
    }

    TerminalReporter.prototype.jasmineStarted = function(runner) {
      this.startedAt = +(new Date);
    };

    TerminalReporter.prototype.jasmineDone = function(runner) {
      var elapsed, now;
      now = +(new Date);
      elapsed = now - this.startedAt;
      console.log("Completed in " + elapsed + "ms");
    };

    TerminalReporter.prototype.suiteStarted = function(suite) {};

    TerminalReporter.prototype.suiteDone = function(suite) {};

    TerminalReporter.prototype.specStarted = function(spec) {};

    TerminalReporter.prototype.specDone = function(spec) {};

    return TerminalReporter;

  })();

  exports.terminalReporters = {
    TerminalReporter: TerminalReporter,
    TerminalVerboseReporter: TerminalReporter
  };

}).call(this);
